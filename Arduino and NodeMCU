// accelerometer taken from https://www.mschoeffler.de/2017/10/05/tutorial-how-to-use-the-gy-521-module-mpu-6050-breakout-board-with-the-arduino-uno/
#include "Wire.h" // This library allows you to communicate with I2C devices.
#define trigPin 13
#define echoPin 12
const int redPin = 4;
const int greenPin = 2;
const int bluePin = 7;

const int MPU_ADDR = 0x68; // I2C address of the MPU-6050. If AD0 pin is set to HIGH, the I2C address will be 0x69.
int16_t accelerometer_x, accelerometer_y, accelerometer_z; // variables for accelerometer raw data
int16_t gyro_x, gyro_y, gyro_z; // variables for gyro raw data
int16_t temperature; // variables for temperature data
char tmp_str[7]; // temporary variable used in convert function
char* convert_int16_to_str(int16_t i) { // converts int16 to string. Moreover, resulting strings will have the same length in the debug monitor.
  sprintf(tmp_str, "%6d", i);
  return tmp_str;
}
void setup() {
  pinMode(trigPin, OUTPUT);
  pinMode (redPin, OUTPUT);
  pinMode (greenPin, OUTPUT);
  pinMode (bluePin, OUTPUT);
  Serial.begin(9600);
  Wire.begin();
  Wire.beginTransmission(MPU_ADDR); // Begins a transmission to the I2C slave (GY-521 board)
  Wire.write(0x6B); // PWR_MGMT_1 register
  Wire.write(0); // set to zero (wakes up the MPU-6050)
  Wire.endTransmission(true);
}
void loop() {
  long duration , distance;
digitalWrite (trigPin , LOW ); // start trig at 0
delayMicroseconds (2);
digitalWrite (trigPin , HIGH ); //The rising edge of trig pulse
delayMicroseconds (10); // decides duration of trig pulse
digitalWrite (trigPin , LOW ); //falling edge of the trig pulse
// NOTE: echo pin reads HIGH till it receives the reflected signal
duration = pulseIn (echoPin , HIGH ); // Reading the duration for which echoPin was HIGH gives
//you the time the sensor receives a reflected signal at the echo pin
distance = (duration / 2) / 29.1; //Calculate the distance of the reflecting surface in cm
//
 //


//  if (light < 20) {
//    pinMode (redPin, HIGH);
//  } else {
//   pinMode (redPin, LOW);
//  }

  Wire.beginTransmission(MPU_ADDR);
  Wire.write(0x3B); // starting with register 0x3B (ACCEL_XOUT_H) [MPU-6000 and MPU-6050 Register Map and Descriptions Revision 4.2, p.40]
  Wire.endTransmission(false); // the parameter indicates that the Arduino will send a restart. As a result, the connection is kept active.
  Wire.requestFrom(MPU_ADDR, 7*2, true); // request a total of 7*2=14 registers
 
  // "Wire.read()<<8 | Wire.read();" means two registers are read and stored in the same variable
  accelerometer_x = Wire.read()<<8 | Wire.read(); // reading registers: 0x3B (ACCEL_XOUT_H) and 0x3C (ACCEL_XOUT_L)
  accelerometer_y = Wire.read()<<8 | Wire.read(); // reading registers: 0x3D (ACCEL_YOUT_H) and 0x3E (ACCEL_YOUT_L)
  accelerometer_z = Wire.read()<<8 | Wire.read(); // reading registers: 0x3F (ACCEL_ZOUT_H) and 0x40 (ACCEL_ZOUT_L)
  temperature = Wire.read()<<8 | Wire.read(); // reading registers: 0x41 (TEMP_OUT_H) and 0x42 (TEMP_OUT_L)
  gyro_x = Wire.read()<<8 | Wire.read(); // reading registers: 0x43 (GYRO_XOUT_H) and 0x44 (GYRO_XOUT_L)
  gyro_y = Wire.read()<<8 | Wire.read(); // reading registers: 0x45 (GYRO_YOUT_H) and 0x46 (GYRO_YOUT_L)
  gyro_z = Wire.read()<<8 | Wire.read(); // reading registers: 0x47 (GYRO_ZOUT_H) and 0x48 (GYRO_ZOUT_L)
Serial.print(distance);
//  if (distance<6 && distance>=0)
// if (distance<20 && distance>=6)
// if (distance>=20)

    if (accelerometer_x <700){      
    digitalWrite(greenPin, LOW);
      digitalWrite(bluePin, LOW);
      if (distance < 20 && distance >= 6) {
    digitalWrite(redPin, HIGH);
    delay(100);
    digitalWrite(redPin, LOW);
    delay(100);
    digitalWrite(redPin, HIGH);
    delay(100);
      }
      if (distance < 6 && distance >= 0) {
    digitalWrite(redPin, HIGH);
    delay(20);
    digitalWrite(redPin, LOW);
    delay(20);
    digitalWrite(redPin, HIGH);
    delay(20);
      }
      if (distance >= 20) {
    digitalWrite(redPin, HIGH);
    delay(500);
    digitalWrite(redPin, LOW);
    delay(500);
    digitalWrite(redPin, HIGH);
    delay(500);
      }
    }
 

  if (accelerometer_x > 700 && accelerometer_x < 1200){
    digitalWrite (redPin, LOW);
    digitalWrite (bluePin, LOW);
      if (distance < 20 && distance >= 6) {
    digitalWrite(greenPin, HIGH);
    delay(100);
    digitalWrite(greenPin, LOW);
    delay(100);
    digitalWrite(greenPin, HIGH);
    delay(100);
      }
      if (distance < 6 && distance >= 0) {
    digitalWrite(greenPin, HIGH);
    delay(20);
    digitalWrite(greenPin, LOW);
    delay(20);
    digitalWrite(greenPin, HIGH);
    delay(20);
      }
      if (distance >= 20) {
    digitalWrite(greenPin, HIGH);
    delay(500);
    digitalWrite(greenPin, LOW);
    delay(500);
    digitalWrite(greenPin, HIGH);
    delay(500);
      }
  }

  if (accelerometer_x > 1200){
    digitalWrite (greenPin, LOW);
    digitalWrite (redPin, LOW);
      if (distance < 20 && distance >= 6) {
    digitalWrite(bluePin, HIGH);
    delay(100);
    digitalWrite(bluePin, LOW);
    delay(100);
    digitalWrite(bluePin, HIGH);
    delay(100);
      }
      if (distance < 6 && distance >= 0) {
    digitalWrite(bluePin, HIGH);
    delay(20);
    digitalWrite(bluePin, LOW);
    delay(20);
    digitalWrite(bluePin, HIGH);
    delay(20);
      }
      if (distance >= 20) {
    digitalWrite(bluePin, HIGH);
    delay(500);
    digitalWrite(bluePin, LOW);
    delay(500);
    digitalWrite(bluePin, HIGH);
    delay(500);
      }
  }
 
  // print out data
  Serial.print("aX = "); Serial.print(convert_int16_to_str(accelerometer_x));
  Serial.print(" | aY = "); Serial.print(convert_int16_to_str(accelerometer_y));
  Serial.print(" | aZ = "); Serial.print(convert_int16_to_str(accelerometer_z));
  // the following equation was taken from the documentation [MPU-6000/MPU-6050 Register Map and Description, p.30]
  Serial.print(" | tmp = "); Serial.print(temperature/340.00+36.53);
  Serial.print(" | gX = "); Serial.print(convert_int16_to_str(gyro_x));
  Serial.print(" | gY = "); Serial.print(convert_int16_to_str(gyro_y));
  Serial.print(" | gZ = "); Serial.print(convert_int16_to_str(gyro_z));
  Serial.println();


  // delay
  delay(1000);
}

// nodemcu 

#include <ESP8266WiFi.h>
#include <BlynkSimpleEsp8266.h>

// You should get Auth Token in the Blynk App.
// Go to the Project Settings (nut icon).
char auth[] = "vinBTwBtRaPmIlsbQw-QixzyCJPWYZRk";

// Your WiFi credentials.
// Set password to "" for open networks.
char ssid[] = "Verizon-SM-G955U-6F34";
char pass[] = "kfpo644&";

void setup()
{
  // Debug console
  Serial.begin(9600);

  Blynk.begin(auth, ssid, pass);
}

void loop()
{
  Blynk.run();
}
